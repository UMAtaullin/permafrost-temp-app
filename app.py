import streamlit as st
import pandas as pd
import numpy as np
from model import PermafrostModel
from excel_parser import BoreholeDataParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–¢–µ—Ä–º–æ–º–µ—Ç—Ä–∏—è –º–µ—Ä–∑–ª—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤", page_icon="üßä", layout="wide"
)

st.title("üßä –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∏–∏")
st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—É—Ä–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if "model" not in st.session_state:
    st.session_state.model = PermafrostModel()
    st.session_state.parser = BoreholeDataParser()
    st.session_state.borehole_data = None

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –±—É—Ä–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞", type=["xlsx", "xls"]
    )

    if uploaded_file is not None:
        st.session_state.borehole_data = st.session_state.parser.parse_excel_data(
            uploaded_file
        )

        if st.session_state.borehole_data is not None:
            boreholes = st.session_state.parser.get_boreholes_list(
                st.session_state.borehole_data
            )
            selected_borehole = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É", boreholes)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–≤–∞–∂–∏–Ω–µ
            borehole_layers = st.session_state.parser.get_layers_for_borehole(
                st.session_state.borehole_data, selected_borehole
            )

            st.subheader("–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä–µ–∑ —Å–∫–≤–∞–∂–∏–Ω—ã")
            for i, layer in enumerate(borehole_layers, 1):
                st.write(
                    f"{i}. {layer['lithology']}: {layer['depth_from']}-{layer['depth_to']}–º"
                )

    st.header("üå°Ô∏è –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    surface_temp = st.number_input(
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (¬∞C)", -30.0, 20.0, -5.0, 0.5
    )
    season = st.selectbox("–í—Ä–µ–º—è –≥–æ–¥–∞", ["–∑–∏–º–∞", "–≤–µ—Å–Ω–∞", "–ª–µ—Ç–æ", "–æ—Å–µ–Ω—å"])

    st.header("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    use_ml = st.checkbox(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML –º–æ–¥–µ–ª—å", value=st.session_state.model.is_ml_trained
    )

    if st.button("–û–±—É—á–∏—Ç—å ML –º–æ–¥–µ–ª—å") and len(st.session_state.model.training_data) > 0:
        success, message = st.session_state.model.train_ml_model()
        if success:
            st.success(message)
        else:
            st.error(message)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
if st.session_state.borehole_data is not None and "selected_borehole" in locals():
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã
    layers = st.session_state.parser.get_layers_for_borehole(
        st.session_state.borehole_data, selected_borehole
    )

    st.header(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–∫–≤–∞–∂–∏–Ω—ã {selected_borehole}")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–Ω—Ç–∞ –Ω–∞ –≥–ª—É–±–∏–Ω–µ
    def get_lithology_at_depth(depth, layers):
        for layer in layers:
            if depth <= layer["depth_to"]:
                return layer["lithology"]
        return layers[-1]["lithology"]

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–ª—É–±–∏–Ω—ã –¥–ª—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∏–∏
    standard_depths = [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
    ]

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    data = []
    for depth in standard_depths:
        if depth <= layers[-1]["depth_to"]:
            lith_at_depth = get_lithology_at_depth(depth, layers)
            predicted_temp = st.session_state.model.predict_temperature(
                depth, lith_at_depth, surface_temp, season, use_ml
            )

            ground_type_map = {
                "–ø–µ—Å–æ–∫": "–ø–µ—Å–æ–∫ —Å—Ä–µ–¥–Ω–µ–π –∫—Ä—É–ø–Ω–æ—Å—Ç–∏",
                "—Å—É–ø–µ—Å—å": "—Å—É–ø–µ—Å—å",
                "—Å—É–≥–ª–∏–Ω–æ–∫": "—Å—É–≥–ª–∏–Ω–æ–∫",
                "—Ç–æ—Ä—Ñ": "—Å—É–≥–ª–∏–Ω–æ–∫",
            }

            ground_type = ground_type_map.get(lith_at_depth, "—Å—É–≥–ª–∏–Ω–æ–∫")
            ground_state = st.session_state.model.get_ground_state(
                predicted_temp, ground_type
            )

            data.append(
                {
                    "–ì–ª—É–±–∏–Ω–∞ (–º)": depth,
                    "–ì—Ä—É–Ω—Ç": lith_at_depth,
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)": predicted_temp,
                    "–°–æ—Å—Ç–æ—è–Ω–∏–µ": ground_state,
                }
            )

    df = pd.DataFrame(data)
    st.dataframe(df, use_container_width=True)

    # –°–µ–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ä–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏—è
    st.header("üìù –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

    col1, col2, col3 = st.columns(3)
    with col1:
        train_depth = st.number_input("–ì–ª—É–±–∏–Ω–∞ –∑–∞–º–µ—Ä–∞ (–º)", 0.0, 20.0, 2.0, 0.5)
    with col2:
        train_lithology = st.selectbox(
            "–ì—Ä—É–Ω—Ç –Ω–∞ –≥–ª—É–±–∏–Ω–µ", ["—Ç–æ—Ä—Ñ", "—Å—É–≥–ª–∏–Ω–æ–∫", "—Å—É–ø–µ—Å—å", "–ø–µ—Å–æ–∫"]
        )
    with col3:
        actual_temp = st.number_input(
            "–†–µ–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -30.0, 20.0, 0.0, 0.1
        )

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"):
        st.session_state.model.add_training_data(
            train_depth, train_lithology, surface_temp, season, actual_temp
        )
        st.success(
            f"–ó–∞–º–µ—Ä –Ω–∞ –≥–ª—É–±–∏–Ω–µ {train_depth}–º –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –∑–∞–º–µ—Ä–æ–≤: {len(st.session_state.model.training_data)}"
        )

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ML –º–æ–¥–µ–ª–∏
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ó–∞–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", len(st.session_state.model.training_data))
    with col2:
        st.metric(
            "ML –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞", "–î–∞" if st.session_state.model.is_ml_trained else "–ù–µ—Ç"
        )

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –±—É—Ä–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown(
        """
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª** –±—É—Ä–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    2. **–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    3. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –≤—Ä–µ–º—è –≥–æ–¥–∞)
    4. **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å** –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    5. **–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ä—ã** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    6. **–û–±—É—á–∞–π—Ç–µ ML –º–æ–¥–µ–ª—å** –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
    """
    )
